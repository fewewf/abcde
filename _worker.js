import{connect}from"cloudflare:sockets";let userID="d342d11e-d424-4583-b36e-524ab1f0afa0";const proxyIPs=["cdn.xn--b6gac.eu.org:443","cdn-all.xn--b6gac.eu.org:443"];let proxyIP=proxyIPs[Math.floor(Math.random()*proxyIPs.length)],proxyPort=proxyIP.includes(":")?proxyIP.split(":")[1]:"443",socks5Address="",socks5Relay=!1;if(!isValidUUID(userID))throw new Error("uuid is not valid");let parsedSocks5Address={},enableSocks=!1;export default{async fetch(t,e,n){try{const{UUID:n,PROXYIP:o,SOCKS5:r,SOCKS5_RELAY:a}=e;userID=n||userID,socks5Address=r||socks5Address,socks5Relay=a||socks5Relay;const s=handleProxyConfig(o);if(proxyIP=s.ip,proxyPort=s.port,socks5Address)try{const t=selectRandomAddress(socks5Address);parsedSocks5Address=socks5AddressParser(t),enableSocks=!0}catch(t){console.log(t.toString()),enableSocks=!1}const i=userID.includes(",")?userID.split(",").map((t=>t.trim())):[userID],l=new URL(t.url),c=t.headers.get("Host"),d=l.pathname.substring(1),p=1===i.length?d===i[0]||d===`sub/${i[0]}`||d===`bestip/${i[0]}`?i[0]:null:i.find((t=>[t,`sub/${t}`,`bestip/${t}`].some((t=>d.startsWith(t)))));if("websocket"!==t.headers.get("Upgrade")){if("/cf"===l.pathname)return new Response(JSON.stringify(t.cf,null,4),{status:200,headers:{"Content-Type":"application/json;charset=utf-8"}});if(p){if(l.pathname===`/${p}`||l.pathname===`/sub/${p}`){const t=l.pathname.startsWith("/sub/"),e=o?o.split(",").map((t=>t.trim())):proxyIP,n=t?GenSub(p,c,e):getConfig(p,c,e);return new Response(n,{status:200,headers:{"Content-Type":t?"text/plain;charset=utf-8":"text/html; charset=utf-8"}})}if(l.pathname===`/bestip/${p}`)return fetch(`https://sub.xf.free.hr/auto?host=${c}&uuid=${p}&path=/`,{headers:t.headers})}return handleDefaultPath(l,t)}return await ProtocolOverWSHandler(t)}catch(t){return new Response(t.toString())}}};async function handleDefaultPath(t,e){const n=e.headers.get("Host");return new Response(`\n\t  <!DOCTYPE html>\n\t  <html lang="en">\n\t  <head>\n\t\t  <meta charset="UTF-8">\n\t\t  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\t\t  <title>${n} - Cloud Drive</title>\n\t\t  <style>\n\t\t\t  body {\n\t\t\t\t  font-family: Arial, sans-serif;\n\t\t\t\t  line-height: 1.6;\n\t\t\t\t  margin: 0;\n\t\t\t\t  padding: 20px;\n\t\t\t\t  background-color: #f4f4f4;\n\t\t\t  }\n\t\t\t  .container {\n\t\t\t\t  max-width: 800px;\n\t\t\t\t  margin: auto;\n\t\t\t\t  background: white;\n\t\t\t\t  padding: 20px;\n\t\t\t\t  border-radius: 5px;\n\t\t\t\t  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n\t\t\t  }\n\t\t\t  h1 {\n\t\t\t\t  color: #333;\n\t\t\t  }\n\t\t\t  .file-list {\n\t\t\t\t  list-style-type: none;\n\t\t\t\t  padding: 0;\n\t\t\t  }\n\t\t\t  .file-list li {\n\t\t\t\t  background: #f9f9f9;\n\t\t\t\t  margin-bottom: 10px;\n\t\t\t\t  padding: 10px;\n\t\t\t\t  border-radius: 3px;\n\t\t\t\t  display: flex;\n\t\t\t\t  align-items: center;\n\t\t\t  }\n\t\t\t  .file-list li:hover {\n\t\t\t\t  background: #f0f0f0;\n\t\t\t  }\n\t\t\t  .file-icon {\n\t\t\t\t  margin-right: 10px;\n\t\t\t\t  font-size: 1.2em;\n\t\t\t  }\n\t\t\t  .file-link {\n\t\t\t\t  text-decoration: none;\n\t\t\t\t  color: #0066cc;\n\t\t\t\t  flex-grow: 1;\n\t\t\t  }\n\t\t\t  .file-link:hover {\n\t\t\t\t  text-decoration: underline;\n\t\t\t  }\n\t\t\t  .upload-area {\n\t\t\t\t  margin-top: 20px;\n\t\t\t\t  padding: 40px;\n\t\t\t\t  background: #e9e9e9;\n\t\t\t\t  border: 2px dashed #aaa;\n\t\t\t\t  border-radius: 5px;\n\t\t\t\t  text-align: center;\n\t\t\t\t  cursor: pointer;\n\t\t\t\t  transition: all 0.3s ease;\n\t\t\t  }\n\t\t\t  .upload-area:hover, .upload-area.drag-over {\n\t\t\t\t  background: #d9d9d9;\n\t\t\t\t  border-color: #666;\n\t\t\t  }\n\t\t\t  .upload-area h2 {\n\t\t\t\t  margin-top: 0;\n\t\t\t\t  color: #333;\n\t\t\t  }\n\t\t\t  #fileInput {\n\t\t\t\t  display: none;\n\t\t\t  }\n\t\t\t  .upload-icon {\n\t\t\t\t  font-size: 48px;\n\t\t\t\t  color: #666;\n\t\t\t\t  margin-bottom: 10px;\n\t\t\t  }\n\t\t\t  .upload-text {\n\t\t\t\t  font-size: 18px;\n\t\t\t\t  color: #666;\n\t\t\t  }\n\t\t\t  .upload-status {\n\t\t\t\t  margin-top: 20px;\n\t\t\t\t  font-style: italic;\n\t\t\t\t  color: #666;\n\t\t\t  }\n\t\t\t  .file-actions {\n\t\t\t\t  display: flex;\n\t\t\t\t  gap: 10px;\n\t\t\t  }\n\t\t\t  .delete-btn {\n\t\t\t\t  color: #ff4444;\n\t\t\t\t  cursor: pointer;\n\t\t\t\t  background: none;\n\t\t\t\t  border: none;\n\t\t\t\t  padding: 5px;\n\t\t\t  }\n\t\t\t  .delete-btn:hover {\n\t\t\t\t  color: #ff0000;\n\t\t\t  }\n\t\t\t  .clear-all-btn {\n\t\t\t\t  background-color: #ff4444;\n\t\t\t\t  color: white;\n\t\t\t\t  border: none;\n\t\t\t\t  padding: 10px 15px;\n\t\t\t\t  border-radius: 4px;\n\t\t\t\t  cursor: pointer;\n\t\t\t\t  margin-bottom: 20px;\n\t\t\t  }\n\t\t\t  .clear-all-btn:hover {\n\t\t\t\t  background-color: #ff0000;\n\t\t\t  }\n\t\t  </style>\n\t  </head>\n\t  <body>\n\t\t  <div class="container">\n\t\t\t  <h1>Cloud Drive</h1>\n\t\t\t  <p>Welcome to your personal cloud storage. Here are your uploaded files:</p>\n\t\t\t  <button id="clearAllBtn" class="clear-all-btn">Clear All Files</button>\n\t\t\t  <ul id="fileList" class="file-list">\n\t\t\t  </ul>\n\t\t\t  <div id="uploadArea" class="upload-area">\n\t\t\t\t  <div class="upload-icon">üìÅ</div>\n\t\t\t\t  <h2>Upload a File</h2>\n\t\t\t\t  <p class="upload-text">Drag and drop a file here or click to select</p>\n\t\t\t\t  <input type="file" id="fileInput" hidden>\n\t\t\t  </div>\n\t\t\t  <div id="uploadStatus" class="upload-status"></div>\n\t\t  </div>\n\t\t  <script>\n\t\t\t  function loadFileList() {\n\t\t\t\t  const fileList = document.getElementById('fileList');\n\t\t\t\t  const savedFiles = JSON.parse(localStorage.getItem('uploadedFiles')) || [];\n\t\t\t\t  fileList.innerHTML = '';\n\t\t\t\t  savedFiles.forEach((file, index) => {\n\t\t\t\t\t  const li = document.createElement('li');\n\t\t\t\t\t  li.innerHTML = \`\n\t\t\t\t\t\t  <span class="file-icon">üìÑ</span>\n\t\t\t\t\t\t  <a href="https://ipfs.io/ipfs/\${file.Url.split('/').pop()}" class="file-link" target="_blank">\${file.Name}</a>\n\t\t\t\t\t\t  <div class="file-actions">\n\t\t\t\t\t\t\t  <button class="delete-btn" onclick="deleteFile(\${index})">\n\t\t\t\t\t\t\t\t  <span class="file-icon">‚ùå</span>\n\t\t\t\t\t\t\t  </button>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  \`;\n\t\t\t\t\t  fileList.appendChild(li);\n\t\t\t\t  });\n\t\t\t  }\n\n\t\t\t  function deleteFile(index) {\n\t\t\t\t  const savedFiles = JSON.parse(localStorage.getItem('uploadedFiles')) || [];\n\t\t\t\t  savedFiles.splice(index, 1);\n\t\t\t\t  localStorage.setItem('uploadedFiles', JSON.stringify(savedFiles));\n\t\t\t\t  loadFileList();\n\t\t\t  }\n\n\t\t\t  document.getElementById('clearAllBtn').addEventListener('click', () => {\n\t\t\t\t  if (confirm('Are you sure you want to clear all files?')) {\n\t\t\t\t\t  localStorage.removeItem('uploadedFiles');\n\t\t\t\t\t  loadFileList();\n\t\t\t\t  }\n\t\t\t  });\n\n\t\t\t  loadFileList();\n\n\t\t\t  const uploadArea = document.getElementById('uploadArea');\n\t\t\t  const fileInput = document.getElementById('fileInput');\n\t\t\t  const uploadStatus = document.getElementById('uploadStatus');\n\n\t\t\t  uploadArea.addEventListener('dragover', (e) => {\n\t\t\t\t  e.preventDefault();\n\t\t\t\t  uploadArea.classList.add('drag-over');\n\t\t\t  });\n\n\t\t\t  uploadArea.addEventListener('dragleave', () => {\n\t\t\t\t  uploadArea.classList.remove('drag-over');\n\t\t\t  });\n\n\t\t\t  uploadArea.addEventListener('drop', (e) => {\n\t\t\t\t  e.preventDefault();\n\t\t\t\t  uploadArea.classList.remove('drag-over');\n\t\t\t\t  const files = e.dataTransfer.files;\n\t\t\t\t  if (files.length) {\n\t\t\t\t\t  handleFileUpload(files[0]);\n\t\t\t\t  }\n\t\t\t  });\n\n\t\t\t  uploadArea.addEventListener('click', () => {\n\t\t\t\t  fileInput.click();\n\t\t\t  });\n\n\t\t\t  fileInput.addEventListener('change', (e) => {\n\t\t\t\t  const file = e.target.files[0];\n\t\t\t\t  if (file) {\n\t\t\t\t\t  handleFileUpload(file);\n\t\t\t\t  }\n\t\t\t  });\n\n\t\t\t  async function handleFileUpload(file) {\n\t\t\t\t  uploadStatus.textContent = \`Uploading: \${file.name}...\`;\n\t\t\t\t  \n\t\t\t\t  const formData = new FormData();\n\t\t\t\t  formData.append('file', file);\n\n\t\t\t\t  try {\n\t\t\t\t\t  const response = await fetch('https://app.img2ipfs.org/api/v0/add', {\n\t\t\t\t\t\t  method: 'POST',\n\t\t\t\t\t\t  body: formData,\n\t\t\t\t\t\t  headers: {\n\t\t\t\t\t\t\t  'Accept': 'application/json',\n\t\t\t\t\t\t  },\n\t\t\t\t\t  });\n\n\t\t\t\t\t  if (!response.ok) {\n\t\t\t\t\t\t  throw new Error('Upload failed');\n\t\t\t\t\t  }\n\n\t\t\t\t\t  const result = await response.json();\n\t\t\t\t\t  uploadStatus.textContent = \`File uploaded successfully! IPFS Hash: \${result.Hash}\`;\n\t\t\t\t\t  \n\t\t\t\t\t  const savedFiles = JSON.parse(localStorage.getItem('uploadedFiles')) || [];\n\t\t\t\t\t  savedFiles.push(result);\n\t\t\t\t\t  localStorage.setItem('uploadedFiles', JSON.stringify(savedFiles));\n\t\t\t\t\t  \n\t\t\t\t\t  loadFileList();\n\t\t\t\t\t  \n\t\t\t\t  } catch (error) {\n\t\t\t\t\t  console.error('Error:', error);\n\t\t\t\t\t  uploadStatus.textContent = 'Upload failed. Please try again.';\n\t\t\t\t  }\n\t\t\t  }\n\t\t  <\/script>\n\t  </body>\n\t  </html>\n\t`,{headers:{"content-type":"text/html;charset=UTF-8"}})}async function ProtocolOverWSHandler(t){const e=new WebSocketPair,[n,o]=Object.values(e);o.accept();let r="",a="";const log=(t,e)=>{console.log(`[${r}:${a}] ${t}`,e||"")},s=t.headers.get("sec-websocket-protocol")||"",i=MakeReadableWebSocketStream(o,s,log);let l={value:null},c=!1;return i.pipeTo(new WritableStream({async write(t,e){if(c)return await handleDNSQuery(t,o,null,log);if(l.value){const e=l.value.writable.getWriter();return await e.write(t),void e.releaseLock()}const{hasError:n,message:s,addressType:i,portRemote:d=443,addressRemote:p="",rawDataIndex:u,ProtocolVersion:f=new Uint8Array([0,0]),isUDP:m}=ProcessProtocolHeader(t,userID);if(r=p,a=`${d}--${Math.random()} ${m?"udp ":"tcp "} `,n)throw new Error(s);if(m){if(53!==d)throw new Error("UDP proxy is only enabled for DNS (port 53)");return void(c=!0)}const g=new Uint8Array([f[0],0]),h=t.slice(u);if(c)return handleDNSQuery(h,o,g,log);HandleTCPOutBound(l,i,p,d,h,o,g,log)},close(){log("readableWebSocketStream is close")},abort(t){log("readableWebSocketStream is abort",JSON.stringify(t))}})).catch((t=>{log("readableWebSocketStream pipeTo error",t)})),new Response(null,{status:101,webSocket:n})}async function HandleTCPOutBound(t,e,n,o,r,a,s,i){async function connectAndWrite(n,o,a=!1){let s;s=socks5Relay||a?await socks5Connect(e,n,o,i):connect({hostname:n,port:o}),t.value=s,i(`connected to ${n}:${o}`);const l=s.writable.getWriter();return await l.write(r),l.releaseLock(),s}let l=await connectAndWrite(n,o);RemoteSocketToWS(l,a,s,(async function(){l=enableSocks?await connectAndWrite(n,o,!0):await connectAndWrite(proxyIP||n,proxyPort||o,!1),l.closed.catch((t=>{console.log("retry tcpSocket closed error",t)})).finally((()=>{safeCloseWebSocket(a)})),RemoteSocketToWS(l,a,s,null,i)}),i)}function MakeReadableWebSocketStream(t,e,n){let o=!1;return new ReadableStream({start(o){t.addEventListener("message",(t=>{const e=t.data;o.enqueue(e)})),t.addEventListener("close",(()=>{safeCloseWebSocket(t),o.close()})),t.addEventListener("error",(t=>{n("webSocketServer has error"),o.error(t)}));const{earlyData:r,error:a}=base64ToArrayBuffer(e);a?o.error(a):r&&o.enqueue(r)},pull(t){},cancel(e){n(`ReadableStream was canceled, due to ${e}`),o=!0,safeCloseWebSocket(t)}})}function ProcessProtocolHeader(t,e){if(t.byteLength<24)return{hasError:!0,message:"invalid data"};const n=new DataView(t),o=n.getUint8(0),r=stringify(new Uint8Array(t.slice(1,17))),a=e.includes(",")?e.split(","):[e],s=a.some((t=>r===t.trim()))||1===a.length&&r===a[0].trim();if(console.log(`userID: ${r}`),!s)return{hasError:!0,message:"invalid user"};const i=n.getUint8(17),l=n.getUint8(18+i);if(1!==l&&2!==l)return{hasError:!0,message:`command ${l} is not supported, command 01-tcp,02-udp,03-mux`};const c=18+i+1,d=n.getUint16(c),p=n.getUint8(c+2);let u,f,m;switch(p){case 1:f=4,m=c+3,u=new Uint8Array(t.slice(m,m+f)).join(".");break;case 2:f=n.getUint8(c+3),m=c+4,u=(new TextDecoder).decode(t.slice(m,m+f));break;case 3:f=16,m=c+3,u=Array.from({length:8},((t,e)=>n.getUint16(m+2*e).toString(16))).join(":");break;default:return{hasError:!0,message:`invalid addressType: ${p}`}}return u?{hasError:!1,addressRemote:u,addressType:p,portRemote:d,rawDataIndex:m+f,protocolVersion:new Uint8Array([o]),isUDP:2===l}:{hasError:!0,message:`addressValue is empty, addressType is ${p}`}}async function RemoteSocketToWS(t,e,n,o,r){let a=!1;try{await t.readable.pipeTo(new WritableStream({async write(t){if(e.readyState!==WS_READY_STATE_OPEN)throw new Error("WebSocket is not open");a=!0,n?(e.send(await new Blob([n,t]).arrayBuffer()),n=null):e.send(t)},close(){r(`Remote connection readable closed. Had incoming data: ${a}`)},abort(t){console.error("Remote connection readable aborted:",t)}}))}catch(t){console.error("RemoteSocketToWS error:",t.stack||t),safeCloseWebSocket(e)}!a&&o&&(r("No incoming data, retrying"),await o())}function base64ToArrayBuffer(t){if(!t)return{earlyData:null,error:null};try{t=t.replace(/-/g,"+").replace(/_/g,"/");const e=atob(t),n=new ArrayBuffer(e.length),o=new Uint8Array(n);for(let t=0;t<e.length;t++)o[t]=e.charCodeAt(t);return{earlyData:n,error:null}}catch(t){return{earlyData:null,error:t}}}function isValidUUID(t){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t)}const WS_READY_STATE_OPEN=1,WS_READY_STATE_CLOSING=2;function safeCloseWebSocket(t){try{t.readyState!==WS_READY_STATE_OPEN&&t.readyState!==WS_READY_STATE_CLOSING||t.close()}catch(t){console.error("safeCloseWebSocket error:",t)}}const byteToHex=Array.from({length:256},((t,e)=>(e+256).toString(16).slice(1)));function unsafeStringify(t,e=0){return[byteToHex[t[e]],byteToHex[t[e+1]],byteToHex[t[e+2]],byteToHex[t[e+3]],"-",byteToHex[t[e+4]],byteToHex[t[e+5]],"-",byteToHex[t[e+6]],byteToHex[t[e+7]],"-",byteToHex[t[e+8]],byteToHex[t[e+9]],"-",byteToHex[t[e+10]],byteToHex[t[e+11]],byteToHex[t[e+12]],byteToHex[t[e+13]],byteToHex[t[e+14]],byteToHex[t[e+15]]].join("").toLowerCase()}function stringify(t,e=0){const n=unsafeStringify(t,e);if(!isValidUUID(n))throw new TypeError("Stringified UUID is invalid");return n}async function handleDNSQuery(t,e,n,o){try{const r="8.8.4.4",a=53;let s=n;const i=connect({hostname:r,port:a});o(`connected to ${r}:${a}`);const l=i.writable.getWriter();await l.write(t),l.releaseLock(),await i.readable.pipeTo(new WritableStream({async write(t){e.readyState===WS_READY_STATE_OPEN&&(s?(e.send(await new Blob([s,t]).arrayBuffer()),s=null):e.send(t))},close(){o(`dns server(${r}) tcp is close`)},abort(t){console.error(`dns server(${r}) tcp is abort`,t)}}))}catch(t){console.error(`handleDNSQuery have exception, error: ${t.message}`)}}async function socks5Connect(t,e,n,o){const{username:r,password:a,hostname:s,port:i}=parsedSocks5Address,l=connect({hostname:s,port:i}),c=new Uint8Array([5,2,0,2]),d=l.writable.getWriter();await d.write(c),o("sent socks greeting");const p=l.readable.getReader(),u=new TextEncoder;let f,m=(await p.read()).value;if(5!==m[0])return void o(`socks server version error: ${m[0]} expected: 5`);if(255===m[1])return void o("no acceptable methods");if(2===m[1]){if(o("socks server needs auth"),!r||!a)return void o("please provide username/password");const t=new Uint8Array([1,r.length,...u.encode(r),a.length,...u.encode(a)]);if(await d.write(t),m=(await p.read()).value,1!==m[0]||0!==m[1])return void o("fail to auth socks server")}switch(t){case 1:f=new Uint8Array([1,...e.split(".").map(Number)]);break;case 2:f=new Uint8Array([3,e.length,...u.encode(e)]);break;case 3:f=new Uint8Array([4,...e.split(":").flatMap((t=>[parseInt(t.slice(0,2),16),parseInt(t.slice(2),16)]))]);break;default:return void o(`invild  addressType is ${t}`)}const g=new Uint8Array([5,1,0,...f,n>>8,255&n]);if(await d.write(g),o("sent socks request"),m=(await p.read()).value,0===m[1])return o("socks connection opened"),d.releaseLock(),p.releaseLock(),l;o("fail to open socks connection")}function socks5AddressParser(t){let e,n,o,r,[a,s]=t.split("@").reverse();if(s){const t=s.split(":");if(2!==t.length)throw new Error("Invalid SOCKS address format");[e,n]=t}const i=a.split(":");if(r=Number(i.pop()),isNaN(r))throw new Error("Invalid SOCKS address format");o=i.join(":");if(o.includes(":")&&!/^\[.*\]$/.test(o))throw new Error("Invalid SOCKS address format");return{username:e,password:n,hostname:o,port:r}}const at="QA==",pt="dmxlc3M=",ed="RUR0dW5uZWw=";function getConfig(t,e,n){const o=`?encryption=none&security=tls&sni=${e}&fp=randomized&type=ws&host=${e}&path=%2F%3Fed%3D2048#${e}`,r=t.split(","),a=(r[0],`https://${e}/bestip/${r[0]}`),s=`https://url.v1.mk/sub?target=clash&url=${encodeURIComponent(`https://${e}/sub/${r[0]}?format=clash`)}&insert=false&emoji=true&list=false&tfo=false&scv=true&fdn=false&sort=false&new_name=true`,i=`\n  <head>\n    <title>EDtunnel: Configuration</title>\n    <meta name='viewport' content='width=device-width, initial-scale=1'>\n    <meta property='og:site_name' content='EDtunnel: Protocol Configuration' />\n    <meta property='og:type' content='website' />\n    <meta property='og:title' content='EDtunnel - Protocol Configuration and Subscribe Output' />\n    <meta property='og:description' content='Use Cloudflare Pages and Worker serverless to implement protocol' />\n    <meta property='og:url' content='https://${e}/' />\n    <meta property='og:image' content='https://cdn.jsdelivr.net/gh/6Kmfi6HP/EDtunnel@refs/heads/main/image/logo.png' />\n    <meta name='twitter:card' content='summary_large_image' />\n    <meta name='twitter:title' content='EDtunnel - Protocol Configuration and Subscribe Output' />\n    <meta name='twitter:description' content='Use Cloudflare Pages and Worker serverless to implement protocol' />\n    <meta name='twitter:url' content='https://${e}/' />\n    <meta name='twitter:image' content='https://cdn.jsdelivr.net/gh/6Kmfi6HP/EDtunnel@refs/heads/main/image/logo.png' />\n    <meta property='og:image:width' content='1500' />\n    <meta property='og:image:height' content='1500' />\n\n    <style>\n      body {\n        font-family: 'Roboto', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        background-color: #000000;\n        color: #ffffff;\n        line-height: 1.6;\n        padding: 20px;\n        max-width: 1200px;\n        margin: 0 auto;\n      }\n      .container {\n        background-color: #111111;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(255, 255, 255, 0.1);\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n      h1, h2 {\n        color: #ffffff;\n      }\n      .config-item {\n        background-color: #222222;\n        border: 1px solid #333333;\n        border-radius: 4px;\n        padding: 15px;\n        margin-bottom: 15px;\n      }\n      .config-item h3 {\n        margin-top: 0;\n        color: #ffffff;\n      }\n      .btn {\n        background-color: #ffffff;\n        color: #000000;\n        border: none;\n        padding: 10px 15px;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: background-color 0.3s, color 0.3s;\n      }\n      .btn:hover {\n        background-color: #cccccc;\n      }\n      .btn-group {\n        margin-top: 10px;\n      }\n      .btn-group .btn {\n        margin-right: 10px;\n      }\n      pre {\n        background-color: #333333;\n        border: 1px solid #444444;\n        border-radius: 4px;\n        padding: 10px;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        color: #00ff00;\n      }\n      .logo {\n        float: left;\n        margin-right: 20px;\n        margin-bottom: 20px;\n\t\tmax-width: 30%;\n      }\n      @media (max-width: 768px) {\n        .logo {\n          float: none;\n          display: block;\n          margin: 0 auto 20px;\n          max-width: 90%; /* Adjust the max-width to fit within the container */\n        }\n        .btn-group {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        .btn-group .btn {\n          margin-bottom: 10px;\n          width: 100%;\n          text-align: center;\n        }\n      }\n      .code-container {\n        position: relative;\n        margin-bottom: 15px;\n      }\n      .code-container pre {\n        margin: 0;\n        padding-right: 100px; /* Make space for the button */\n      }\n      .copy-btn {\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        padding: 5px 10px;\n        font-size: 0.8em;\n      }\n      .subscription-info {\n        margin-top: 20px;\n        background-color: #222222;\n        border-radius: 4px;\n        padding: 15px;\n      }\n      .subscription-info h3 {\n        color: #ffffff;\n        margin-top: 0;\n      }\n      .subscription-info ul {\n        padding-left: 20px;\n      }\n      .subscription-info li {\n        margin-bottom: 10px;\n      }\n    </style>\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">\n  </head>\n  `,l=`\n    <div class="container">\n      <h1>EDtunnel: Protocol Configuration</h1>\n      <img src="https://cdn.jsdelivr.net/gh/6Kmfi6HP/EDtunnel@refs/heads/main/image/logo.png" alt="EDtunnel Logo" class="logo">\n      <p>Welcome! This function generates configuration for the vless protocol. If you found this useful, please check our GitHub project:</p>\n      <p><a href="https://github.com/6Kmfi6HP/EDtunnel" target="_blank" style="color: #00ff00;">EDtunnel - https://github.com/6Kmfi6HP/EDtunnel</a></p>\n      <div style="clear: both;"></div>\n      <div class="btn-group">\n        <a href="//${e}/sub/${r[0]}" class="btn" target="_blank"><i class="fas fa-link"></i> VLESS Subscription</a>\n        <a href="clash://install-config?url=${encodeURIComponent(`https://${e}/sub/${r[0]}?format=clash`)}" class="btn" target="_blank"><i class="fas fa-bolt"></i> Clash Subscription</a>\n        <a href="${s}" class="btn" target="_blank"><i class="fas fa-bolt"></i> Clash Link</a>\n        <a href="${a}" class="btn" target="_blank"><i class="fas fa-star"></i> Best IP Subscription</a>\n      </div>\n      <div class="subscription-info">\n        <h3>Options Explained:</h3>\n        <ul>\n          <li><strong>VLESS Subscription:</strong> Direct link for VLESS protocol configuration. Suitable for clients supporting VLESS.</li>\n          <li><strong>Clash Subscription:</strong> Opens the Clash client with pre-configured settings. Best for Clash users on mobile devices.</li>\n          <li><strong>Clash Link:</strong> A web link to convert the VLESS config to Clash format. Useful for manual import or troubleshooting.</li>\n          <li><strong>Best IP Subscription:</strong> Provides a curated list of optimal server IPs for many <b>different countries</b>.</li>\n        </ul>\n        <p>Choose the option that best fits your client and needs. For most users, the VLESS or Clash Subscription will be the easiest to use.</p>\n      </div>\n    </div>\n  `,c=r.map((t=>{const r=atob(pt)+"://"+t+atob(at)+e+":443"+o,a=atob(pt)+"://"+t+atob(at)+n[0].split(":")[0]+":"+proxyPort+o;return`\n      <div class="container config-item">\n        <h2>UUID: ${t}</h2>\n        <h3>Default IP Configuration</h3>\n        <div class="code-container">\n          <pre><code>${r}</code></pre>\n          <button class="btn copy-btn" onclick='copyToClipboard("${r}")'><i class="fas fa-copy"></i> Copy</button>\n        </div>\n        \n        <h3>Best IP Configuration</h3>\n        <div class="input-group mb-3">\n          <select class="form-select" id="proxySelect" onchange="updateProxyConfig()">\n            ${"string"==typeof n?`<option value="${n}">${n}</option>`:Array.from(n).map((t=>`<option value="${t}">${t}</option>`)).join("")}\n          </select>\n        </div>\n\t\t<br>\n        <div class="code-container">\n          <pre><code id="proxyConfig">${a}</code></pre>\n          <button class="btn copy-btn" onclick='copyToClipboard(document.getElementById("proxyConfig").textContent)'><i class="fas fa-copy"></i> Copy</button>\n        </div>\n      </div>\n    `})).join("");return`\n  <html>\n  ${i}\n  <body>\n    ${l}\n    ${c}\n    <script>\n      const userIDArray = ${JSON.stringify(r)};\n      const pt = "${pt}";\n      const at = "${at}";\n      const commonUrlPart = "?encryption=none&security=tls&sni=${e}&fp=randomized&type=ws&host=${e}&path=%2F%3Fed%3D2048#${e}";\n\n      function copyToClipboard(text) {\n        navigator.clipboard.writeText(text)\n          .then(() => {\n            alert("Copied to clipboard");\n          })\n          .catch((err) => {\n            console.error("Failed to copy to clipboard:", err);\n          });\n      }\n\n      function updateProxyConfig() {\n        const select = document.getElementById('proxySelect');\n        const proxyValue = select.value;\n        const [host, port] = proxyValue.split(':');\n        const protocolSec = atob(pt) + '://' + userIDArray[0] + atob(at) + host + ":" + port + commonUrlPart;\n        document.getElementById("proxyConfig").textContent = protocolSec;\n      }\n    <\/script>\n  </body>\n  </html>`}const HttpPort=new Set([80,8080,8880,2052,2086,2095,2082]),HttpsPort=new Set([443,8443,2053,2096,2087,2083]);function GenSub(t,e,n){const o=new Set([e,"icook.hk","japan.com","malaysia.com","russia.com","singapore.com","www.visa.com","www.csgo.com","www.shopify.com","www.whatismyip.com","www.ipget.net","speed.marisalnc.com","freeyx.cloudflare88.eu.org","cloudflare.182682.xyz","cfip.cfcdn.vip",proxyIPs,"cf.0sm.com","cloudflare-ip.mofashi.ltd","cf.090227.xyz","cname.xirancdn.us","cf.zhetengsha.eu.org","cloudflare.9jy.cc","cf.zerone-cdn.pp.ua","cfip.1323123.xyz","cdn.tzpro.xyz","cf.877771.xyz","cnamefuckxxs.yuchen.icu","cfip.xxxxxxxx.tk"]),r=t.includes(",")?t.split(","):[t],a=Array.isArray(n)?n:n?n.includes(",")?n.split(","):[n]:proxyIPs,s=`?encryption=none&security=none&fp=random&type=ws&host=${e}&path=${encodeURIComponent("/"+Math.random().toString(36).substring(2,15)+"?ed=2048")}#`,i=`?encryption=none&security=tls&sni=${e}&fp=random&type=ws&host=${e}&path=%2F%3Fed%3D2048#`,l=r.flatMap((t=>{let n=[];return e.includes("pages.dev")||o.forEach((o=>{Array.from(HttpPort).forEach((r=>{const a=`${e.split(".")[0]}-${o}-HTTP-${r}`,i=atob(pt)+"://"+t+atob(at)+o+":"+r+s+a;n.push(i)}))})),o.forEach((o=>{Array.from(HttpsPort).forEach((r=>{const a=`${e.split(".")[0]}-${o}-HTTPS-${r}`,s=atob(pt)+"://"+t+atob(at)+o+":"+r+i+a;n.push(s)}))})),a.forEach((o=>{const[r,a="443"]=o.split(":"),s=`${e.split(".")[0]}-${r}-HTTPS-${a}`,l=atob(pt)+"://"+t+atob(at)+r+":"+a+i+s+"-"+atob(ed);n.push(l)})),n}));return btoa(l.join("\n"))}function handleProxyConfig(t){if(t){const e=selectRandomAddress(t.split(",").map((t=>t.trim()))),[n,o="443"]=e.split(":");return{ip:n,port:o}}{const t=proxyIP.includes(":")?proxyIP.split(":")[1]:"443";return{ip:proxyIP.split(":")[0],port:t}}}function selectRandomAddress(t){const e="string"==typeof t?t.split(",").map((t=>t.trim())):t;return e[Math.floor(Math.random()*e.length)]}
